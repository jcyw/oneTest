---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by baggiowang.
--- DateTime: 2020/7/21 11:25 上午
---
if PreHotUpdateRes then
    return PreHotUpdateRes
end

local Tools = import("HotUpdate/Tools/Tools")

PreHotUpdateRes = {
    -- 资源列表
    list = {}, -- item={md5="xx", size=xx, downloaded=true|false}
    -- 下载列表
    downloadings = {},
    -- 失败列表
    failedlist = {},
}

local downloadExpire = 5
function PreHotUpdateRes.checkDownloading(name)
    print("name-------------", table.inspect(name))
    local ok, savePath = PreHotUpdateRes.nameToSavePath(name.k)
    ---------- 已下载
    if ok and PreHotUpdateRes.list[name.k] and PreHotUpdateRes.list[name.k].downloaded then
        return true, savePath
    end
    --------- 下载超时
    local task = PreHotUpdateRes.downloadings[savePath]
    if task and task.updatedAt + downloadExpire <= os.time() then
        PreHotUpdateRes.downloadings[savePath] = nil
        return false, savePath
    end
    --------- 下载中
    if task then
        return true, savePath
    end
    return false, savePath
end

function PreHotUpdateRes.downloadPreHotUpdateFile(name, savePath)
    Log.Info("PreHotUpdateRes download: {0}", name.k)
    local task = PreHotUpdateRes.downloadings[savePath]
    local url = PreHotUpdateRes.nameToUrl(name.k)
    -- 下载文件
    local data, err = Tools.download(url, function()
        local task = PreHotUpdateRes.downloadings[savePath]
        if task then
            task.updatedAt = os.time()
        end
    end)
    if err then
        PreHotUpdateRes.downloadings[savePath] = nil
        table.insert(PreHotUpdateRes.failedlist, name)
        return
    end
    Log.Info("DynamicRes download success: {0}, {1}", name.k, savePath)
    Util.WriteFile(savePath, data)
    -- 文件检测
    if PreHotUpdateRes.list[name.k].md5 ~= PreHotUpdateRes.getMD5(name.k) then
        Log.Error("md5 not match: {0} {1}->{2}", name.k, PreHotUpdateRes.list[name.k].md5, PreHotUpdateRes.getMD5(name.k))
        PreHotUpdateRes.downloadings[savePath] = nil
        table.insert(PreHotUpdateRes.failedlist, name)
        return
    end
    PreHotUpdateRes.downloadings[savePath] = nil
    PreHotUpdateRes.list[name.k].downloaded = true
    GameVersionList.finishedCount  = GameVersionList.finishedCount + 1
    PreHotUpdateRes.CheckDownloadComplete()
end

function PreHotUpdateRes.CheckDownloadComplete()
    if GameVersionList.finishedCount == GameVersionList.totalCount then
        Log.Error("downloadPreUpdateRes finished")
        PlayerDataModel.SetLocalData("PRE_UPDATE_FINISHED", "true")
        GameVersionList.SetLocalVersionList(GameVersionList.remote.VersionContent)
        GameVersion.SetLocalVersion(GameVersion.remote)
        Log.Error("PRE_UPDATE_FINISHED--------{0}", PlayerDataModel.GetLocalData("PRE_UPDATE_FINISHED"))
    else
        Log.Error("UpdateRes not complete! retrying: {0}", GameVersionList.totalCount - GameVersionList.finishedCount)
        GameVersionList.SyncPreHotupdateFiles(PreHotUpdateRes.failedlist)
    end
end

local _host = ""
function PreHotUpdateRes.host()
    if _host == "" then
        local version = GameVersion.remote
        _host = GameVersion.VersionHost().."/"..version
    end
    return _host
end

function PreHotUpdateRes.nameToSavePath(name)
    --local lines = StringUtil.Split(name, '/')
    --print("lines------------", table.inspect(lines))
    local path = "PreHotUpdate/"..name
    return KResourceModule.TryGetDocumentResourceUrl(path, false)
end

function PreHotUpdateRes.nameToUrl(name)
    return PreHotUpdateRes.host().."/"..name
end

function PreHotUpdateRes.getMD5(name)
    local ok, fullPath = PreHotUpdateRes.nameToSavePath(name)
    print("getmd5---------------", ok, fullPath)
    if not ok then
        return ""
    end
    local aaa = Util.md5file(fullPath)
    print("aaaa----------", aaa)
    return Util.md5file(fullPath)
end

return PreHotUpdateRes